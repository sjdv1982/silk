{'__prototype__': {'a': 1},
 'methods': {'__init__': {'code': '    def __init__(self, a=None):\n'
                                  '        if a is not None:\n'
                                  '            self.a = a\n',
                          'language': 'python'},
             'a2': {'getter': '    @property\n'
                              '    def a2(self):\n'
                              '        return self.a + 1000\n',
                    'language': 'python',
                    'property': True,
                    'setter': '    @a2.setter\n'
                              '    def a2(self, value):\n'
                              '        self.a = value - 1000\n'},
             'aa': {'code': '    def aa(self):\n        return(self.a+1)\n',
                    'language': 'python'}},
 'validators': [{'code': '    @validator\n'
                         '    def ok(self):\n'
                         '        print("VALIDATE!", self.a.unsilk)\n'
                         '        assert self.a < 11\n',
                 'language': 'python'}]}
VALIDATE! 1
{'__prototype__': {'a': 1},
 'methods': {'__init__': {'code': '    def __init__(self, a=None):\n'
                                  '        if a is not None:\n'
                                  '            self.a = a\n',
                          'language': 'python'},
             'a2': {'getter': '    @property\n'
                              '    def a2(self):\n'
                              '        return self.a + 1000\n',
                    'language': 'python',
                    'property': True,
                    'setter': '    @a2.setter\n'
                              '    def a2(self, value):\n'
                              '        self.a = value - 1000\n'},
             'aa': {'code': '    def aa(self):\n        return(self.a+1)\n',
                    'language': 'python'}},
 'properties': {'a': {'type': 'integer'}},
 'type': 'object',
 'validators': [{'code': '    @validator\n'
                         '    def ok(self):\n'
                         '        print("VALIDATE!", self.a.unsilk)\n'
                         '        assert self.a < 11\n',
                 'language': 'python'}]}
{'a': 3}
11
1010
VALIDATE! 2
2
VALIDATE! 2
VALIDATE! 11
Traceback (most recent call last):
  File "test-meta.py", line 49, in <module>
    c.validate()
  File "/seamless/seamless/silk/Silk.py", line 928, in validate
    self._validate()
  File "/seamless/seamless/silk/Silk.py", line 898, in _validate
    schema_validator(schema).validate(data)
  File "/opt/conda/lib/python3.7/site-packages/jsonschema/validators.py", line 353, in validate
    raise error
jsonschema.exceptions.ValidationError: 
************************************************************************
*  Silk validation error
************************************************************************
Traceback (most recent call last):
  File "/seamless/seamless/silk/validation/validators.py", line 232, in validator_validators
    validator_func(silkobject)
  File "Silk validator 1", line 4, in ok
    assert self.a < 11
AssertionError
************************************************************************


Failed validating 'validators' in schema:
    {'__prototype__': {'a': 1},
     'methods': {'__init__': {'code': '    def __init__(self, a=None):\n'
                                      '        if a is not None:\n'
                                      '            self.a = a\n',
                              'language': 'python'},
                 'a2': {'getter': '    @property\n'
                                  '    def a2(self):\n'
                                  '        return self.a + 1000\n',
                        'language': 'python',
                        'property': True,
                        'setter': '    @a2.setter\n'
                                  '    def a2(self, value):\n'
                                  '        self.a = value - 1000\n'},
                 'aa': {'code': '    def aa(self):\n'
                                '        return(self.a+1)\n',
                        'language': 'python'}},
     'properties': {'a': {'type': 'integer'}},
     'type': 'object',
     'validators': [{'code': '    @validator\n'
                             '    def ok(self):\n'
                             '        print("VALIDATE!", self.a.unsilk)\n'
                             '        assert self.a < 11\n',
                     'language': 'python'}]}

On instance:
    {'a': 11}
